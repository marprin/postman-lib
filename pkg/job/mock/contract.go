// Code generated by MockGen. DO NOT EDIT.
// Source: ./contract.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	job "github.com/marprin/postman-lib/pkg/job"
	opentracing "github.com/opentracing/opentracing-go"
	reflect "reflect"
)

// MockJobContract is a mock of JobContract interface
type MockJobContract struct {
	ctrl     *gomock.Controller
	recorder *MockJobContractMockRecorder
}

// MockJobContractMockRecorder is the mock recorder for MockJobContract
type MockJobContractMockRecorder struct {
	mock *MockJobContract
}

// NewMockJobContract creates a new mock instance
func NewMockJobContract(ctrl *gomock.Controller) *MockJobContract {
	mock := &MockJobContract{ctrl: ctrl}
	mock.recorder = &MockJobContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobContract) EXPECT() *MockJobContractMockRecorder {
	return m.recorder
}

// Delay mocks base method
func (m *MockJobContract) Delay(ctx context.Context, jobName string, params job.JobParam, tracer opentracing.Tracer) (*job.DelayJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delay", ctx, jobName, params, tracer)
	ret0, _ := ret[0].(*job.DelayJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delay indicates an expected call of Delay
func (mr *MockJobContractMockRecorder) Delay(ctx, jobName, params, tracer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delay", reflect.TypeOf((*MockJobContract)(nil).Delay), ctx, jobName, params, tracer)
}

// DelayIn mocks base method
func (m *MockJobContract) DelayIn(ctx context.Context, delayInSec int64, jobName string, params job.JobParam, tracer opentracing.Tracer) (*job.DelayJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelayIn", ctx, delayInSec, jobName, params, tracer)
	ret0, _ := ret[0].(*job.DelayJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelayIn indicates an expected call of DelayIn
func (mr *MockJobContractMockRecorder) DelayIn(ctx, delayInSec, jobName, params, tracer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelayIn", reflect.TypeOf((*MockJobContract)(nil).DelayIn), ctx, delayInSec, jobName, params, tracer)
}
