// Code generated by MockGen. DO NOT EDIT.
// Source: ./contract.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHashContract is a mock of HashContract interface
type MockHashContract struct {
	ctrl     *gomock.Controller
	recorder *MockHashContractMockRecorder
}

// MockHashContractMockRecorder is the mock recorder for MockHashContract
type MockHashContractMockRecorder struct {
	mock *MockHashContract
}

// NewMockHashContract creates a new mock instance
func NewMockHashContract(ctrl *gomock.Controller) *MockHashContract {
	mock := &MockHashContract{ctrl: ctrl}
	mock.recorder = &MockHashContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHashContract) EXPECT() *MockHashContractMockRecorder {
	return m.recorder
}

// CheckHashValidity mocks base method
func (m *MockHashContract) CheckHashValidity(hash, bareString string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHashValidity", hash, bareString)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHashValidity indicates an expected call of CheckHashValidity
func (mr *MockHashContractMockRecorder) CheckHashValidity(hash, bareString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHashValidity", reflect.TypeOf((*MockHashContract)(nil).CheckHashValidity), hash, bareString)
}

// GenerateHash mocks base method
func (m *MockHashContract) GenerateHash(bareString string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHash", bareString)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHash indicates an expected call of GenerateHash
func (mr *MockHashContractMockRecorder) GenerateHash(bareString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHash", reflect.TypeOf((*MockHashContract)(nil).GenerateHash), bareString)
}
